{"version":3,"sources":["logo.svg","containers/Nav.js","components/HistoryRow.js","components/Pagination.js","containers/HistoryTableContainer.js","components/Numbers.js","containers/NumbersContainer.js","containers/About.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","Navbar","className","expanded","Brand","href","src","logo","alt","Nav","Link","HistoryRow","props","state","animate","nA","this","numbers","split","date","dayCount","weekCount","monthCount","yearCount","allTime","React","Component","PPagination","Pagination","size","First","onClick","first","Prev","previous","Item","active","currentPage","Next","next","HistoryTableContainer","onClickFirstPage","bind","onClickNextPage","onClickPreviousPage","rows","loadPageData","error","alert","console","log","pageNumber","fetch","API_ADDRESS","then","res","json","result","forEach","element","rCount","day","week","month","year","setState","Object","keys","key","join","length","count","catch","errorHadnler","event","RGNC","title","tableRows","push","Table","striped","bordered","hover","Numbers","prevProps","timerID","setTimeout","clearInterval","client","W3CWebSocket","NumbersContainer","numbersList","loadPage","page","resonse","response_json","struct","ready","onopen","onmessage","evt","addNumbers","data","onclose","assign","newPage","map","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.561a7112.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from '../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction Navigation() {\n    return (\n        <Navbar className=\"justify-content-center\" expanded={false}>\n            <Navbar.Brand className=\"mr-0\" href=\"/home\">\n            <img className=\"App-logo\" src={logo} alt=\"logo\" />\n            </Navbar.Brand>\n                <Nav className=\"menu-text\">\n                    <Nav.Link className=\"mr-2\" href=\"/numbers\">Top Generated Numbers</Nav.Link>\n                    <Nav.Link className=\"mr-2\" href=\"/history\">History</Nav.Link>    \n                    <Nav.Link href=\"/about\">About</Nav.Link>    \n                </Nav>\n        </Navbar>\n            )\n}\n\nexport default Navigation;\n","import React from 'react';\n\nclass HistoryRow extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animate:false,\n        };\n    }\n\n    render() {\n        let nA = this.props.numbers.split(\" \");\n        return (\n        // date, history number, randomly generated number, count\n            <tr>\n                <td className=\"text-nowrap\">{this.props.date}</td>\n                <td className=\"text-nowrap\">{nA[0]} {nA[1]} {nA[2]} {nA[3]} {nA[4]} <span className=\"letterBox\">{nA[5]}</span></td>\n                <td>{this.props.dayCount}</td>\n                <td>{this.props.weekCount}</td>\n                <td>{this.props.monthCount}</td>\n                <td>{this.props.yearCount}</td>\n                <td>{this.props.allTime}</td>\n            </tr>\n        )\n    }\n}\n\nexport default HistoryRow\n","import React from 'react';\nimport Pagination from 'react-bootstrap/Pagination'\n\n\nclass PPagination extends React.Component {\n    \n    render() {\n        return (\n        <Pagination size=\"lg\">\n          <Pagination.First onClick={this.props.first}/>\n          <Pagination.Prev onClick={this.props.previous}/>\n          <Pagination.Item active>{this.props.currentPage}</Pagination.Item>\n          <Pagination.Next onClick={this.props.next}/>\n        </Pagination>)\n    }\n}\n\nexport default PPagination;\n","import React from 'react';\nimport HistoryRow from '../components/HistoryRow';\nimport PPagination from '../components/Pagination';\nimport Table from 'react-bootstrap/Table';\n\nconst API_ADDRESS = \"http://127.0.0.1:8080\"\n\nclass HistoryTableContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClickFirstPage = this.onClickFirstPage.bind(this);\n        this.onClickNextPage = this.onClickNextPage.bind(this);\n        this.onClickPreviousPage = this.onClickPreviousPage.bind(this);\n        this.state = {\n            rows: {},\n            currentPage: 1,\n        }\n    }\n    \n    componentDidMount() {\n        this.loadPageData(this.state.currentPage);\n    }\n\n    errorHadnler(error) {\n                    alert(\"Something went wrong, please refresh the page\");\n                    console.log(error);\n    }\n    \n    loadPageData(pageNumber) {\n        fetch(API_ADDRESS + \"/history/page/\" + pageNumber)\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    let rows = {};\n                    result.forEach((element) => {\n                        rows[element.numbers] = {\n                            date: element.date, \n                            rCount: {day: 0, week: 0, month: 0, year: 0, allTime: 0}\n                        };\n                    });\n                    this.setState({rows: rows});\n                    return rows;\n                })\n            .then((rows) => {\n                Object.keys(rows).forEach((key) => {\n                    fetch(API_ADDRESS + \"/numbers/\" + key.split(\" \").join(\"/\"))\n                            .then(res => res.json())\n                            .then((res) => {\n                                if (res.length  === 1) {\n                                    rows[key].rCount = {\n                                        day: res[0].dayCount, week: res[0].weekCount,\n                                        month: res[0].weekCount, year: res[0].yearCount,\n                                        allTime: res[0].count};\n                                    this.setState({rows: rows});\n                                }\n                            });\n                            });\n            })\n            .catch(this.errorHadnler);\n    }\n\n    onClickFirstPage(event) {\n        if (this.state.currentPage === 1) {\n            return\n        }\n        this.setState({currentPage: 1});\n        this.loadPageData(1);\n    }\n\n    onClickNextPage(event) {\n        if (Object.keys(this.state.rows).length < 100) {\n            return\n        }\n        let currentPage = this.state.currentPage + 1 ;\n        this.setState({currentPage: currentPage});\n        this.loadPageData(currentPage);\n    }\n\n    onClickPreviousPage(event) {\n        if (this.state.currentPage === 1) {\n            return\n        }\n        let currentPage = this.state.currentPage - 1 ;\n        this.setState({currentPage: currentPage});\n        this.loadPageData(currentPage);\n    }\n\n    render() {\n        const RGNC = <abbr title=\"Randomly Generated Numbers Count\">RGNC</abbr>;\n        let tableRows = []; \n        if (Object.keys(this.state.rows).length){\n        Object.keys(this.state.rows).forEach((key) => {\n            tableRows.push(\n                <HistoryRow key={key} date={this.state.rows[key].date} numbers={key} dayCount={this.state.rows[key].rCount['day']} weekCount={this.state.rows[key].rCount.week} monthCount={this.state.rows[key].rCount.month} yearCount={this.state.rows[key].rCount.year} allTime={this.state.rows[key].rCount.allTime}/>\n        );\n        });\n        };\n        return (\n            <div className=\"main-container\">\n            <Table striped bordered hover>\n                <thead>\n                    <tr className=\"text-center\">\n                        <th className=\"align-middle\">Date</th>\n                        <th className=\"align-middle\">Numbers</th>\n                        <th className=\"align-middle\">{RGNC} Daily</th>\n                        <th className=\"align-middle\">{RGNC} Weekly</th>\n                        <th className=\"align-middle\">{RGNC} Monthly</th>\n                        <th className=\"align-middle\">{RGNC} Yearly</th>\n                        <th className=\"align-middle\">{RGNC} Total</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableRows}\n                </tbody>\n\n            </Table>\n            <div className=\"d-flex justify-content-center\">\n                <PPagination\n                    currentPage={this.state.currentPage}\n                    first={this.onClickFirstPage}\n                    previous={this.onClickPreviousPage}\n                    next={this.onClickNextPage}\n                />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default HistoryTableContainer;\n","import React from 'react';\n\nclass Numbers extends React.Component {\n\n    constructor(props) {\n    super(props);\n\n    this.state = {\n      animate: false,\n    };\n    }\n\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n    if ((this.props.count !== prevProps.count) && !this.state.animate && this.props.count > 1) {\n    this.setState({animate: true});\n  } else {\n      if (this.state.animate) {\n   this.timerID = setTimeout(() => {\n      this.setState({animate: false});\n    }, 1050);\n      }\n  }\n  \n}\ncomponentWillUnmount() {\n    clearInterval(this.timerID);\n  }\nrender() {\n    let nA = this.props.numbers.split(\" \");\n        return (\n            <div className={`numbers ${this.state.animate ? \"shake-animation count-text-static\" : \"\"}`}>\n                <div className=\"flip-card-inner\">\n                    <div className=\"numbers-front\">{nA[0]} {nA[1]} {nA[2]} {nA[3]} {nA[4]} <span className=\"letterBox\">{nA[5]}</span></div>\n                <div className=\"count-back\">{this.props.count}</div>\n                </div>\n            </div>\n        )\n}\n}\n\nexport default Numbers;\n","import React from 'react';\nimport Numbers from '../components/Numbers';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport PPagination from '../components/Pagination';\n\nconst client = new W3CWebSocket('ws://127.0.0.1:8080/ws');\nconst API_ENDPOINT = \"http://127.0.0.1:8080/top/count/\";\n\n\nclass NumbersContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClickFirstPage = this.onClickFirstPage.bind(this);\n        this.onClickNextPage = this.onClickNextPage.bind(this);\n        this.onClickPreviousPage = this.onClickPreviousPage.bind(this);\n        this.state = {\n            numbersList: {},\n            currentPage: 1,\n            \n        };\n    }\n        \n    componentDidMount() {\n        this.loadPage(this.state.currentPage);\n    }\n\n    loadPage(page) {\n        fetch(API_ENDPOINT + page)\n        .then((resonse) => resonse.json())\n            .then((response_json) => {\n                let numbersList = {};\n                response_json.forEach(struct => {\n                    numbersList[struct.numbers] = struct.count;\n                });\n                this.setState({numbersList: numbersList});\n                return true\n            })\n            .then((ready) => {\n                if (ready) {\n                client.onopen = () => {\n                    console.log(\"WebSocket Client Connected\");\n                };\n                client.onmessage = (evt) => {\n                    this.addNumbers(evt.data);\n                };\n                }\n            })\n            .catch((error) => alert(\"Something went wrong, please refresh the page\"));\n    }\n\n    componentWillUnmount() {\n        client.onclose = (evt) => {\n            console.log(\"Connection closed\");\n        };\n    }\n\n    addNumbers(numbers) {\n        // limit 100 records on the page \n        if ((Object.keys(this.state.numbersList).length >= 100) && !(numbers in this.state.numbersList)) {\n            return\n        }\n        let numbersList = Object.assign({}, this.state.numbersList);\n        if (numbers in this.state.numbersList){\n            numbersList[numbers]++;\n        } else {\n            numbersList[numbers] = 1;\n        }\n        this.setState({numbersList: numbersList});\n    }\n\n    onClickFirstPage(event) {\n        if (this.state.currentPage === 1) {\n            return\n        }\n        this.setState({currentPage: 1});\n        this.loadPage(1);\n    }\n\n    onClickNextPage(event) {\n        if (Object.keys(this.state.numbersList).length < 100) {\n            return\n        }\n        let newPage = this.state.currentPage + 1\n        this.setState({currentPage: newPage});\n        this.loadPage(newPage);\n    }\n\n    onClickPreviousPage(event) {\n        if (this.state.currentPage === 1) {\n            return\n        }\n        let currentPage = this.state.currentPage - 1 ;\n        this.setState({currentPage: currentPage});\n        this.loadPage(currentPage);\n    }\n\n    render () {\n        return (\n            <div className=\"main-container\">\n                {\n                    Object.keys(this.state.numbersList).map((numbers) => (\n                        <Numbers key={numbers} numbers={numbers} count={this.state.numbersList[numbers]} animate={true} />\n                    ))\n                }\n            \n            <div className=\"d-flex mt-4 justify-content-center\">\n                <PPagination\n                    currentPage={this.state.currentPage}\n                    first={this.onClickFirstPage}\n                    previous={this.onClickPreviousPage}\n                    next={this.onClickNextPage}\n                />\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default NumbersContainer;\n","import React from 'react';\n\nfunction About() {\n    return (\n        <div className=\"container\">\n            <p className=\"h4 mt-4\">\n                Randomly generated numbers are generate at rate of about 1000/s and colleted for statistics. <br />\n                You can check how it relates to real powerball numbers on the history page. <br />\n                Feel free to send me any feedback, questions or request at yurii.lesh [@t] gmail.com <br />\n            </p>\n            <h3 className=\"mt-3\">Features to be added in the future: </h3>\n                <div className=\"row\">\n                    <div className=\"col-md-2\"></div>\n                    <div className=\"col-md-8\">\n        <ul className=\"text-left h5\">\n                    <li>Pages for top generated numbers per day/week/month/year</li>\n                    <li>Search page by top generated numbers/ idividual single number</li>\n                    <li>Automatically update history page</li>\n                    <li>Option in pagination to go to the last page</li>\n                </ul>\n                If you would like some other feature to be added,<br /> feel free to let me know and I will consider adding it. <br />\n                Thank you\n                </div>.\n                    <div className=\"col-md-2\"></div>\n            </div>\n        </div>\n            )\n}\n\nexport default About;\n","import React from 'react';\nimport '../css/App.css';\n//import NumbersContainer from './NumbersContainer';\nimport Navigation from './Nav';\nimport HistoryTableContainer from './HistoryTableContainer';\nimport NumbersContainer from './NumbersContainer';\nimport About from './About';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\n\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <Router>\n            <Navigation />\n            <Switch>\n                <Route path=\"/history\">\n                    <HistoryTableContainer />\n                </Route>\n                <Route path=\"/numbers\">\n                    <NumbersContainer />\n                </Route>\n                <Route path=\"/about\">\n                    <About />\n                </Route>\n            </Switch>\n        </Router>\n    </div>\n\n    );\n    // <HistoryTableContainer />\n    // <NumbersContainer />\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}